<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <AssemblyName>PuzzleIslandHelper</AssemblyName>
        <RootNamespace>Celeste.Mod.PuzzleIslandHelper</RootNamespace>
        <LangVersion>latest</LangVersion>
        <CelestePrefix Condition="'$(CelestePrefix)' == '' And Exists('..\..\Celeste.dll')">..\..</CelestePrefix>
        <CelestePrefix Condition="'$(CelestePrefix)' == ''">lib-stripped</CelestePrefix>
        <ZippedFiles>..\everest.yaml;..\bin\**\*.*;..\Audio\**\*.*;..\Dialog\**\*.*;..\Graphics\**\*.*;..\Ahorn\**\*.*;..\Loenn\**\*.*</ZippedFiles>
    </PropertyGroup>

    <!--Disable "Copy Local" for all references-->
    <ItemDefinitionGroup>
        <PackageReference PrivateAssets="all" ExcludeAssets="runtime" />
        <Reference Private="false" />
    </ItemDefinitionGroup>

    <ItemGroup>
        <PackageReference Include="MonoMod.RuntimeDetour" Version="25.0.2" PrivateAssets="all" ExcludeAssets="runtime" />
        <PackageReference Include="MonoMod.Patcher" Version="25.0.0-prerelease.2" />
        <PackageReference Include="CelesteAnalyzer" Version="*" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CelesteMod.Publicizer" Version="*" CelesteAssembly="$(CelestePrefix)\Celeste.dll" />
        <Reference Include="$(CelestePrefix)\MMHOOK_Celeste.dll" Private="false" />
        <Reference Include="$(CelestePrefix)\FNA.dll" Private="false" />
    </ItemGroup>
    
    <ItemGroup>
      <Compile Remove="Entities\Destruct.cs" />
      <Compile Remove="Entities\ffffCassetteBlock.cs" />
      <Compile Remove="Entities\InterfaceEntities\Programs\LoadSequence.cs" />
    </ItemGroup>
    <!--Packages from original csproj-->
    <ItemGroup>
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all" />
        <PackageReference Include="YamlDotNet" Version="13.7.1" />
    </ItemGroup>

    <!--Other Mods-->
    <ItemGroup>
        <Reference Include="CelesteTAS-EverestInterop">
          <HintPath>libs\CelesteTAS-EverestInterop.dll</HintPath>
        </Reference>
        <Reference Include="CherryHelper">
          <HintPath>libs\CherryHelper.dll</HintPath>
        </Reference>
        <Reference Include="CommunalHelper">
          <HintPath>libs\CommunalHelper.dll</HintPath>
        </Reference>
        <Reference Include="corkr900Graphics">
          <HintPath>libs\corkr900Graphics.dll</HintPath>
        </Reference>
        <Reference Include="ExtendedVariantMode">
          <HintPath>libs\ExtendedVariantMode.dll</HintPath>
        </Reference>
        <Reference Include="FactoryHelper">
          <HintPath>libs\FactoryHelper.dll</HintPath>
        </Reference>
        <Reference Include="FancyTileEntities">
          <HintPath>libs\FancyTileEntities.dll</HintPath>
        </Reference>
        <Reference Include="FrostTempleHelper">
          <HintPath>libs\FrostTempleHelper.dll</HintPath>
        </Reference>
        <Reference Include="LuaCutscenes">
          <HintPath>libs\LuaCutscenes.dll</HintPath>
        </Reference>
        <Reference Include="MonoMod">
          <HintPath>..\MonoMod.exe</HintPath>
        </Reference>
        <Reference Include="PresentationCore" />
        <Reference Include="PrismaticHelper">
          <HintPath>libs\PrismaticHelper.dll</HintPath>
        </Reference>
        <Reference Include="vitmod">
          <HintPath>libs\vitmod.dll</HintPath>
        </Reference>
        <Reference Include="VivHelper">
          <HintPath>libs\VivHelper.dll</HintPath>
        </Reference>
        <Reference Include="XaphanHelper">
          <HintPath>libs\XaphanHelper.dll</HintPath>
        </Reference>
        <Reference Include="PandorasBox" Publicize="True">
          <HintPath>libs\PandorasBox.dll</HintPath>
        </Reference>
    </ItemGroup>
    <ItemGroup>
      <Compile Update="Entities\InterfaceEntities\SegmentBox.cs">
        <SubType>Component</SubType>
      </Compile>
      <Compile Update="Entities\InterfaceEntities\CharBox.cs">
        <SubType>Component</SubType>
      </Compile>
    </ItemGroup>

    <Target Name="CopyFiles" AfterTargets="Build" Inputs="$(OutputPath)\$(AssemblyName).dll;$(OutputPath)\$(AssemblyName).pdb" Outputs="..\bin\$(AssemblyName).dll;..\bin\$(AssemblyName).pdb">
        <Copy SourceFiles="$(OutputPath)\$(AssemblyName).dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)\$(AssemblyName).pdb" DestinationFolder="..\bin" />
    </Target>

    <Target Name="PackageMod" AfterTargets="CopyFiles" Inputs="$(ZippedFiles)" Outputs="..\PuzzleIslandHelper.zip" Condition="'$(Configuration)' == 'Release'">
        <ItemGroup>
            <FilesToPackage Include="$(ZippedFiles)" />
        </ItemGroup>
        <PackageMod Files="@(FilesToPackage)" OutputPath="..\PuzzleIslandHelper.zip" />
    </Target>
    
    <PropertyGroup>
        <PathMap>$(MSBuildProjectDirectory)=PuzzleIslandHelper/</PathMap>
        <BaseOutputPath>C:\Users\piano\Desktop\Games\to play\celeste-win\Mods\PuzzleIslandHelper\bin</BaseOutputPath>
    </PropertyGroup>
    
    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
      <Optimize>False</Optimize>
    </PropertyGroup>

    <!-- Inline task used to create a .zip for the mod -->
    <UsingTask TaskName="PackageMod" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <OutputPath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Compression" />
            <Code Type="Fragment" Language="cs">
            <![CDATA[
                var projectDir = Path.Combine(@"$(ProjectDir)", ".."); // Go one level up, since we're inside the 'Source' directory
                projectDir = Uri.UnescapeDataString(projectDir);
            
                if (File.Exists(OutputPath))
                    File.Delete(OutputPath);

                using (ZipArchive zip = ZipFile.Open(OutputPath, ZipArchiveMode.Create))
                {
                    foreach (var file in Files)
                    {
                        string filePath = file.GetMetadata("FullPath");
                        string entryName = GetRelativePath(projectDir, filePath);
                        
                        zip.CreateEntryFromFile(filePath, entryName);
                    }
                }
    
                string GetRelativePath(string fromPath, string toPath)
                {
                    if (string.IsNullOrEmpty(fromPath)) throw new ArgumentNullException(nameof(fromPath));
                    if (string.IsNullOrEmpty(toPath))   throw new ArgumentNullException(nameof(toPath));
                
                    Uri fromUri = new Uri(fromPath);
                    Uri toUri = new Uri(toPath);
                
                    if (fromUri.Scheme != toUri.Scheme) { return toPath; } // path can't be made relative.
                
                    Uri relativeUri = fromUri.MakeRelativeUri(toUri);
                    string relativePath = Uri.UnescapeDataString(relativeUri.ToString());
                
                    if (toUri.Scheme.Equals("file", StringComparison.InvariantCultureIgnoreCase))
                    {
                        relativePath = relativePath.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
                    }
                
                    return relativePath;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
